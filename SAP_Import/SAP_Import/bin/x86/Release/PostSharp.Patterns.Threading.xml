<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PostSharp.Patterns.Threading</name>
  </assembly>
  <members>
    <member name="T:PostSharp.Patterns.Threading.AccessLevelAttribute">
      <summary>
            Base class for <see cref="T:PostSharp.Patterns.Threading.ReaderAttribute" />, <see cref="T:PostSharp.Patterns.Threading.WriterAttribute" />, <see cref="T:PostSharp.Patterns.Threading.YielderAttribute" /><see cref="T:PostSharp.Patterns.Threading.UpgradeableReaderAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.AccessLevelAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.AccessLevelAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ActorAttribute">
      <summary>
            Custom attribute that, when applied to a class, implements the <see cref="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel" /> to this class,
            in which calls to methods are processed asynchronously from a single thread, suppressing concurrency inside each instance of the target class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ActorAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorAttribute.OnInstanceConstructed">
      <summary>
            Executed when the target instance gets fully initialized, i.e. just after all constructors have completed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ActorDispatcher">
      <summary>
            A dispatcher compatible with the <see cref="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel" /> threading model, with a message queue based on a <c>ConcurrentQueue</c>
            The queue itself is processed from the <see cref="T:System.Threading.ThreadPool" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ActorDispatcher" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.BeginInvoke(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Queues an action for asynchronous execution.
            </summary>
      <param name="action">Action to be executed.</param>
      <param name="state">Parameter passed to <paramref name="action" /></param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.CheckAccess">
      <summary>
            Determines whether the current thread has access to the current dispatcher.
            </summary>
      <returns>
        <c>true</c> if the current thread can directly call methods of objects protected 
            by the current dispatcher, or <c>false</c> if methods <see cref="M:PostSharp.Patterns.Threading.IDispatcher.Invoke(System.Threading.SendOrPostCallback,System.Object)" /> or <see cref="M:PostSharp.Patterns.Threading.IDispatcher.BeginInvoke(System.Threading.SendOrPostCallback,System.Object)" />
            must be used.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.Invoke(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Executes an action synchronously.
            </summary>
      <param name="action">Action to be executed.</param>
      <param name="state">Parameter passed to <paramref name="action" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ActorDispatcher.IsQueueEmpty">
      <summary>
            Determines whether there are work items in the queue.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.MustYield(System.Int32)">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Threading.ActorDispatcher.ProcessQueue" /> method should interrupt the processing of the message queue before the queue is empty.
            </summary>
      <param name="count">Number of messages already processed by the current invocation of the <see cref="M:PostSharp.Patterns.Threading.ActorDispatcher.ProcessQueue" /> method.</param>
      <returns>
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Threading.ActorDispatcher.ProcessQueue" /> method should stop processing messages, <c>false</c> if it should continue. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.OnQueueEmpty">
      <summary>
            Method invoked when the queue becomes empty. The default implementation does not do anything.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.ProcessQueue">
      <summary>
            Processes the message queue synchronously.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ActorDispatcher.ScheduleProcessQueue">
      <summary>
            Schedules the execution of the <see cref="M:PostSharp.Patterns.Threading.ActorDispatcher.ProcessQueue" />, typically on a worker thread or in the <see cref="T:System.Threading.ThreadPool" />.
            The default implementation uses the <see cref="T:System.Threading.ThreadPool" /> on platforms that have a thread pool, otherwise it schedules a new <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.AmbientConcurrencyControllerContext">
      <summary>
            A disposable cookie returned by <see cref="M:PostSharp.Patterns.Threading.ThreadingServices.WithConcurrencyController(PostSharp.Patterns.Threading.IConcurrencyController)" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.AmbientConcurrencyControllerContext.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.BackgroundAttribute">
      <summary>
            Custom attribute that, when applied on a method, causes the method to execute in the background. This aspect can be applied to a method with
            <c>void</c> or <see cref="T:System.Threading.Tasks.Task" /> return type.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.BackgroundAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.BackgroundAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.BackgroundAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
      <summary>
              Method invoked at build time to ensure that the aspect has been applied to the right target.
            </summary>
      <param name="method">Method to which the aspect has been applied</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable field, otherwise
              <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Threading.BackgroundAttribute.IsLongRunning">
      <summary>
            Specifies that the method is long-running and should be executed on its own thread, if that is supported on the target platform.
            If <c>false</c>, the method will be executed in the thread pool.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.BackgroundAttribute.OnInvoke(PostSharp.Aspects.MethodInterceptionArgs)">
      <summary>
              Method invoked <i>instead</i> of the method to which the aspect has been applied.
            </summary>
      <param name="args">Advice arguments.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.BackgroundAttribute.OnInvokeAsync(PostSharp.Aspects.MethodInterceptionArgs)">
      <summary>
              Method invoked <i>instead</i> of the method to which the aspect has been applied.
            </summary>
      <param name="args">Advice arguments.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ConcurrencyControllerFactory">
      <summary>
            Provides methods to create new instances of concurrency controllers.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrencyControllerFactory.CreateReaderWriterSynchronizedController(System.Boolean)">
      <summary>
            Creates a new concurrency controller for the reader-writer-synchronized threading model (<see cref="T:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel" />)
            and specifies whether the new controller should participate in deadlock detection.
            </summary>
      <param name="useDeadlockDetection">Indicates whether the controller should participate in the deadlock detection algorithm.
            Use <see cref="M:PostSharp.Patterns.Threading.DeadlockDetectionPolicy.IsEnabled(System.Reflection.Assembly)" /> to determine whether the policy is enabled for the current assembly.
            </param>
      <returns>A new instance of the reader-writer-synchronized concurrency controller.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrencyControllerFactory.CreateSynchronizedController(System.Boolean)">
      <summary>
            Creates a new concurrency controller for the synchronized threading model (<see cref="T:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel" />)
            and specifies whether the new controller should participate in deadlock detection.
            </summary>
      <param name="useDeadlockDetection">Indicates whether the controller should participate in the deadlock detection algorithm.
            Use <see cref="M:PostSharp.Patterns.Threading.DeadlockDetectionPolicy.IsEnabled(System.Reflection.Assembly)" /> to determine whether the policy is enabled for the current assembly.
            </param>
      <returns>A new instance of the synchronized concurrency controller.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrencyControllerFactory.CreateThreadUnsafeController">
      <summary>
            Creates a new concurrency controller for thread-unsafe threading model (<see cref="T:PostSharp.Patterns.Threading.Models.ThreadUnsafeThreadingModel" />).
            </summary>
      <returns>A new instance of the thread-unsafe concurrency controller.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ConcurrentAccessException">
      <summary>
            Exception thrown when two threads simultaneously attempt to access a method annotated with the <see cref="T:PostSharp.Patterns.Threading.ThreadUnsafeAttribute" />
            custom attribute.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessException.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessException" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessException.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessException" /> and sets the error message.
            </summary>
      <param name="message">Error message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ConcurrentAccessException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessException" /> and sets the error message and the inner exception.
            </summary>
      <param name="message">Error message.</param>
      <param name="inner">Inner exception.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DeadlockDetectedEventArgs">
      <summary>
            Arguments for the <see cref="E:PostSharp.Patterns.Threading.ThreadingServices.DeadlockDetected" /> event.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockDetectedEventArgs.DeadlockInfo">
      <summary>
            Gets the deadlock information object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockDetectedEventArgs.Handled">
      <summary>
            Gets of sets an information indicating whether the event was handled by the user. If the event is not handled, an exception will be thrown on all involved threads.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DeadlockDetectionPolicy">
      <summary>
            Detects deadlocks occurring because of circular wait conditions.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockDetectionPolicy.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.DeadlockDetectionPolicy</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockDetectionPolicy.CompileTimeValidate(System.Reflection.Assembly)">
      <summary>
              Method invoked at build time to ensure that the aspect has been applied to the right target.
            </summary>
      <param name="assembly">Assembly on which the current aspect is applied.</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable target, otherwise
              <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockDetectionPolicy.IsEnabled(System.Reflection.Assembly)">
      <summary>
            Determines whether an <see cref="T:System.Reflection.Assembly" /> has been instrumented for deadlock detection.
            </summary>
      <param name="assembly">An <see cref="T:System.Reflection.Assembly" />.</param>
      <returns>
        <c>true</c> if <paramref name="assembly" /> has been instrumented for deadlock detection, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DeadlockedThreadInfo">
      <summary>
            Described state of thread that was detected to be in a deadlock.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockedThreadInfo.#ctor(System.Threading.Thread,System.Diagnostics.StackTrace)">
      <summary>
            Initializes the object.
            </summary>
      <param name="thread">Thread in a deadlock.</param>
      <param name="stackTrace">Stack trace of the thread or null if it was not possible to obtain it.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockedThreadInfo.ManagedThreadId">
      <summary>
            Gets ID of the managed thread.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockedThreadInfo.StackTrace">
      <summary>
            Gets the stack trace of the thread in deadlock or null if it was not possible to obtain the stack trace.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockedThreadInfo.Thread">
      <summary>
            Gets the thread in deadlock or null if the object was deserialized.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DeadlockException">
      <summary>
            Exception thrown by the <see cref="T:PostSharp.Patterns.Threading.DeadlockDetectionPolicy" /> class when a deadlock
            is detected.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockException.#ctor">
      <summary>
            Initializes a new instance of see cref="DeadlockException"/&gt;.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockException.#ctor(PostSharp.Patterns.Threading.DeadlockInfo)">
      <summary>
            Initializes a new instance of <see cref="T:PostSharp.Patterns.Threading.DeadlockException" /> and specifies the message and involved threads.
            </summary>
      <param name="deadlockInfo">Information about the deadlock.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockException.#ctor(System.String)">
      <summary>
            Initializes a new instance of see cref="DeadlockException"/&gt;.
            </summary>
      <param name="message">Exception message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of see cref="DeadlockException"/&gt;.
            </summary>
      <param name="message">Exception message.</param>
      <param name="innerException">Inner exception.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockException.DeadlockInfo">
      <summary>
            Gets an information about the deadlock.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DeadlockInfo">
      <summary>
            Describes the detected deadlock.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DeadlockInfo.#ctor(System.String,System.Collections.Generic.IList{PostSharp.Patterns.Threading.DeadlockedThreadInfo})">
      <summary>
            Initializes the object.
            </summary>
      <param name="description">Textual description of the detected deadlock.</param>
      <param name="deadlockedThreads">List of objects describing each thread in the deadlock.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockInfo.DeadlockedThreads">
      <summary>
            Gets a collection of objects describing each thread in the deadlock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DeadlockInfo.Description">
      <summary>
            Gets textual description of the deadlock.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DispatchedAttribute">
      <summary>
            Custom attribute that, when applied on a method, specifies that the method should be executed in UI thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatchedAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" /> in blocking mode.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatchedAttribute.#ctor(PostSharp.Patterns.Threading.DispatchedExecutionMode)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" /> and specifies whether the execution
            mode should be blocking or non-blocking.
            </summary>
      <param name="executionMode">A value determining whether and when the caller should wait for the called method to complete.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatchedAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" />.
            </summary>
      <param name="fireAndForget">
        <c>true</c> if the target method must be invoked in non-blocking mode
            (equivalent to <see cref="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.NonBlocking" />),
            or <c>false</c> if the target method must be invoked in blocking mode, that is, if the caller must wait for the
            dispatched method to complete (equivalent to <see cref="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.Blocking" />).</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatchedAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
      <summary>
              Method invoked at build time to ensure that the aspect has been applied to the right target.
            </summary>
      <param name="method">Method to which the aspect has been applied</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable field, otherwise
              <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DispatchedAttribute.ExecutionMode">
      <summary>
            When the aspect is applied to a void non-async method, this property determines whether
            the caller will continue immediately after enqueuing the call to the target method,
            without waiting for the method to complete. The default value is <see cref="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.Blocking" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.DispatchedAttribute.FireAndForget">
      <summary>
            When the aspect is applied to a void non-async method, this property determines whether
            the caller will continue immediately after enqueuing the call to the target method,
            without waiting for the method to complete. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DispatchedExecutionMode">
      <summary>
            Determines whether the caller of a dispatched method (see <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" />)
            waits for the called method.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.Default">
      <summary>
            Default (<see cref="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.Blocking" />).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.Blocking">
      <summary>
            The caller waits for the called method in all cases.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.NonBlocking">
      <summary>
            The caller never waits for the called method. The method is enqueued
            for later execution even on the same context. Methods that have a non-<c>void</c> return type or 
            <c>ref</c> or <c>out</c> parameters cannot be dispatched in non-blocking mode.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.DispatchedExecutionMode.NonBlockingContextSwitch">
      <summary>
            If the caller context equals the target context (e.g. if the caller is the UI thread and the object is affine
            to the UI thread), the method is invoked immediately in the current context in a blocking way. Otherwise,
            if a context switch is necessary, the method call is enqueued for later execution and the caller continues without waiting.
            Methods that have a non-<c>void</c> return type or <c>ref</c> or <c>out</c> parameters cannot be dispatched in non-blocking mode.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.DispatcherFactory">
      <summary>
            Provides implementations of the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> interface.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatcherFactory.GetDispatcherForCurrentContext">
      <summary>
            Gets an implementation of the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> interface that is suitable for dispatching
            to the current context. This method requires that the current thread is associated to
            a <see cref="T:System.Threading.SynchronizationContext" /> or a WPF <c>Dispatcher</c>.
            </summary>
      <returns>An implementation of the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> for the current context, or <c>null</c>
            if the current thread is not associated with any <see cref="T:System.Threading.SynchronizationContext" /> or a WPF <c>Dispatcher</c>.
             </returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatcherFactory.GetDispatcherForSynchronizationContext(System.Threading.SynchronizationContext)">
      <summary>
            Gets an implementation of the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> interface for a given <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="synchronizationContext">A <see cref="T:System.Threading.SynchronizationContext" />.</param>
      <returns>An implementation of <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> that dispatches using <paramref name="synchronizationContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.DispatcherFactory.GetDispatcherForWindowsDispatcher(System.Object)">
      <summary>
            Gets an implementation of the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> interface for a given
            instance of the <c>System.Windows.Threading.Dispatcher</c> class.
            </summary>
      <param name="dispatcher">An instance of the <c>System.Windows.Threading.Dispatcher</c> class.</param>
      <returns>An implementation of <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> wrapping the functionality of <paramref name="dispatcher" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.EntryPointAttribute">
      <summary>
            Custom attribute that, when applied to a private or protected instance method,
            causes all threading model aspects (derived from <see cref="T:PostSharp.Patterns.Threading.ThreadAwareAttribute" /> to introduce runtime generation code.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.EntryPointAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.EntryPointAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute">
      <summary>
            Custom attribute that, when applied to a method or field, specifies that threading model aspects (derived from <see cref="T:PostSharp.Patterns.Threading.ThreadAwareAttribute" />)
            should ignore all verifications for this field or method. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute" /> and specifies the synchronization strategy.
            </summary>
      <param name="appliesToMethodOnly">
        <c>true</c> to avoid adding any synchronization code to the target method, <c>false</c> to add synchronization code
            that allows the method to access other field or method of the target object.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute.AppliesToMethodOnly">
      <summary>
            Determines the synchronization strategy.
            When <see cref="P:PostSharp.Patterns.Threading.ExplicitlySynchronizedAttribute.AppliesToMethodOnly" /> is <c>true</c>, no synchronization code will be added to the target method. When it is set to <c>false</c> to add synchronization code
            will be added to allow the method to access other field or method of the target object. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.FreezableAttribute">
      <summary>
            Custom attribute that, when applied to a class, implements the <see cref="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel" /> to this class.
            The aspect introduces the <see cref="T:PostSharp.Patterns.Threading.IFreezable" /> interface into the target class. After the <see cref="M:PostSharp.Patterns.Threading.IFreezable.Freeze" />
            method has been invoked, the object can no longer be modified, and can therefore be safely shared between several threads.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.FreezableAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.FreezableAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.FreezableAttribute.OnCloned(PostSharp.Aspects.ICloneAwareAspect)">
      <summary>
            Method called after the an object enhanced by the current aspect has been
            cloned using <see cref="M:System.Object.MemberwiseClone" />. The <c>this</c>
            parameter refers to the new aspect instance in the cloned object.
            </summary>
      <param name="source">Aspect instance corresponding to the current
            aspect instance in the cloned target object.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.FreezableAttribute.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IActor">
      <summary>
            Interface implemented by the <see cref="T:PostSharp.Patterns.Threading.ActorAttribute" /> aspect.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IActor.Dispatcher">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Threading.IActorDispatcher" /> for the current actor.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IActorController">
      <summary>
            Specific definition of the <see cref="T:PostSharp.Patterns.Threading.IConcurrencyController" /> for the <see cref="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IActorController.Dispatcher">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Threading.IActorDispatcher" /> for the current actor.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IActorDispatcher">
      <summary>
            Augments the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> interface with an <see cref="M:PostSharp.Patterns.Threading.IActorDispatcher.Initialize" /> method, which is invoked after the actor constructor has been invoked.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IActorDispatcher.Initialize">
      <summary>
            Indicates that the controller should start enforcing access. Before this method is invoked, the <see cref="M:PostSharp.Patterns.Threading.IDispatcher.CheckAccess" />
            method should always return <c>true</c>, allowing any access to the object. This mechanism allows the actor constructor to have full access on itself.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IDispatcher">
      <summary>
            Defines the semantics of a facility that executes actions synchronously or asynchronously,
            possibly on a different thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IDispatcher.BeginInvoke(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Queues an action for asynchronous execution.
            </summary>
      <param name="action">Action to be executed.</param>
      <param name="state">Parameter passed to <paramref name="action" /></param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IDispatcher.CheckAccess">
      <summary>
            Determines whether the current thread has access to the current dispatcher.
            </summary>
      <returns>
        <c>true</c> if the current thread can directly call methods of objects protected 
            by the current dispatcher, or <c>false</c> if methods <see cref="M:PostSharp.Patterns.Threading.IDispatcher.Invoke(System.Threading.SendOrPostCallback,System.Object)" /> or <see cref="M:PostSharp.Patterns.Threading.IDispatcher.BeginInvoke(System.Threading.SendOrPostCallback,System.Object)" />
            must be used.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IDispatcher.Invoke(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Executes an action synchronously.
            </summary>
      <param name="action">Action to be executed.</param>
      <param name="state">Parameter passed to <paramref name="action" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IDispatcher.IsInvokeSupported">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Threading.IDispatcher.Invoke(System.Threading.SendOrPostCallback,System.Object)" /> method is supported.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IDispatcher.SynchronizationContext">
      <summary>
            Gets the <see cref="T:System.Threading.SynchronizationContext" /> associated with the current dispatcher.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IDispatcherObject">
      <summary>
            Interface implemented by objects that are whose access to methods is
            being controlled by a <see cref="P:PostSharp.Patterns.Threading.IDispatcherObject.Dispatcher" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.IDispatcherObject.Dispatcher">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Threading.IDispatcher" /> that controls access to methods
            of the current object.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IFreezable">
      <summary>
            Interface implemented by the <see cref="T:PostSharp.Patterns.Threading.FreezableAttribute" /> aspect. Defines a <see cref="M:PostSharp.Patterns.Threading.IFreezable.Freeze" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.IFreezable.Freeze">
      <summary>
            Prevents the current object to be modified.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.IImmutable">
      <summary>
            Interface implemented by the <see cref="T:PostSharp.Patterns.Threading.ImmutableAttribute" /> aspect.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ImmutableAttribute">
      <summary>
            Custom attribute that, when applied to a class, implements the <see cref="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel" /> to this class.
            The aspect introduces the <see cref="T:PostSharp.Patterns.Threading.IImmutable" /> interface into the target class. Immutable objects cannot
            be modified after the constructor exits.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ImmutableAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ImmutableAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ImmutableAttribute.OnInstanceConstructed">
      <summary>
            Executed when the target instance gets fully initialized, i.e. just after all constructors have completed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ObjectReadOnlyException">
      <summary>
            Exception thrown by objects that have the <see cref="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel" /> or <see cref="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel" />
            when an attempt is made to modify the object after it has been made read-only.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ObjectReadOnlyException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ObjectReadOnlyException" /> class with the default error message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ObjectReadOnlyException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ObjectReadOnlyException" /> class with a given error message.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ObjectReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ObjectReadOnlyException" /> class with a given error message and inner exception.
            </summary>
      <param name="message">The inner message.</param>
      <param name="inner">The exception wrapped by the new <see cref="T:PostSharp.Patterns.Threading.ObjectReadOnlyException" />.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.PrivateThreadAwareAttribute">
      <summary>
            Custom attribute that, when applied to a class, implement the <see cref="T:PostSharp.Patterns.Threading.Models.PrivateThreadingModel" /> into this class,
            in which the threading model of an object is determined by the parent it is assigned to in a parent-child relationship. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.PrivateThreadAwareAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.PrivateThreadAwareAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ReaderAttribute">
      <summary>
            Custom attribute that, when applied on a method, specifies that the method requires read access to the object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReaderAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ReaderAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ReaderWriterSynchronizedAttribute">
      <summary>
            Custom attribute that, when applied on a class, applies the <see cref="T:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel" /> model to this class
            and all derived class.
            Members of this class must then be annotated with attributes specifying the required access level 
            (<see cref="T:PostSharp.Patterns.Threading.ReaderAttribute" />, <see cref="T:PostSharp.Patterns.Threading.WriterAttribute" />, <see cref="T:PostSharp.Patterns.Threading.YielderAttribute" />
            or <see cref="T:PostSharp.Patterns.Threading.UpgradeableReaderAttribute" />), otherwise build-time and run-time errors are emitted.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReaderWriterSynchronizedAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ReaderWriterSynchronizedAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ReadOnlyThreadAwareAttribute">
      <summary>
            Base class for aspects <see cref="T:PostSharp.Patterns.Threading.FreezableAttribute" /> and <see cref="T:PostSharp.Patterns.Threading.ImmutableAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReadOnlyThreadAwareAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ReadOnlyThreadAwareAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReadOnlyThreadAwareAttribute.Advise(System.Object)">
      <summary>
            Injects the advice into the child object.
            </summary>
      <param name="obj"></param>
      <returns>
        <c>true</c> if the children of <paramref name="obj" /> have to be advised as well, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReadOnlyThreadAwareAttribute.RuntimeInitializeInstance">
      <summary>
              Initializes the aspect instance. This method is invoked when all system elements of the aspect (like member imports)
              have completed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ReentrantAttribute">
      <summary>
            Custom attribute that means that the <c>async</c> method to which it is applied can be safely
            re-entered on each <c>await</c> statement. In case of lock-based models, it means that the lock
            is released while awaiting. For the actor model, it means that other methods can be invoked
            during awaiting.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReentrantAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ReentrantAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ReentrantAttribute.CompileTimeValidate(System.Object)">
      <summary>
              Method invoked at build time to ensure that the aspect has been applied to
              the right target.
            </summary>
      <param name="target">Target element.</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable target, otherwise
              <c>false</c>.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.RequiresThreadSafeAttribute">
      <summary>
            Custom attribute that, when applied to a field, property or parameter, checks that the assigned object is thread safe.
            Otherwise, the assignment results in an <see cref="T:System.ArgumentException" />/
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.RequiresThreadSafeAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.RequiresThreadSafeAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.RequiresThreadSafeAttribute.RuntimeInitialize(PostSharp.Reflection.LocationInfo)">
      <summary>
              Initializes the current aspect.
            </summary>
      <param name="locationInfo">Location to which the current aspect is applied.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.SynchronizedAttribute">
      <summary>
            Custom attribute that, when applied to a class, implements the <see cref="T:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel" /> into this class.
            In a synchronized object, only a single thread can access the object at a time. If a second thread needs to access the object
            while it is in used by a first thread, the second thread has to wait until the first thread completes its access.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.SynchronizedAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.SynchronizedAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadAccessException">
      <summary>
            Exception thrown when the calling thread does not have access to the object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAccessException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ThreadAccessException" /> class with the default error message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAccessException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ThreadAccessException" /> class with a given error message.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAccessException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:PostSharp.Patterns.Threading.ThreadAccessException" /> class with a given error message and inner exception.
            </summary>
      <param name="message">The error message.</param>
      <param name="inner">The <see cref="T:System.Exception" /> wrapped by the new <see cref="T:PostSharp.Patterns.Threading.ThreadAccessException" />.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadAffineAttribute">
      <summary>
            Custom attribute that, when applied on a type, ensures the instances of this type can only be accessed by the thread
            that created the instance. When a different thread accesses instances of this type, a <see cref="T:PostSharp.Patterns.Threading.ThreadMismatchException" /> exception is thrown. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAffineAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ThreadAffineAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAffineAttribute.RuntimeInitializeInstance">
      <summary>
              Initializes the aspect instance. This method is invoked when all system elements of the aspect (like member imports)
              have completed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadAwareAttribute">
      <summary>
            Base class for all aspects implementing threading models.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.Advise(System.Object)">
      <summary>
            Injects the advice into the child object.
            </summary>
      <param name="obj"></param>
      <returns>
        <c>true</c> if the children of <paramref name="obj" /> have to be advised as well, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.CompileTimeValidate(System.Type)">
      <summary>
              Method invoked at build time to ensure that the aspect has been applied to the right target.
            </summary>
      <param name="type">Type to which the aspect has been applied</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable field, otherwise
              <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.Finalize">
      <summary>
            Destructor.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.IsEligibleChild(System.Object,PostSharp.Patterns.Model.ChildInfo)">
      <summary>
            Determines if an object is eligible to be a child of the target instance of the current aspect.
            </summary>
      <param name="child"></param>
      <param name="childInfo"></param>
      <returns>
        <c>true</c> if <paramref name="child" /> is eligible to be a child without injecting any advice, otherwise <c>false</c>. When this method returns <c>false</c>,
            the aspect will the invoke the <see cref="M:PostSharp.Patterns.Model.AggregatableClientAttribute.Advise(System.Object)" /> method. </returns>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.OnAdviseChildFailed(System.Object)">
      <summary>
            Method invoked when a child is assigned to a parent and the advices of the parent cannot be added to the child.
            Implementations can choose to throw an exception (thread-aware attributes do this) or ignore the situation (<c>DisposableAttribute</c> does this).
            </summary>
      <param name="child">An object that's ineligible to be a child. It's guaranteed to be non-null.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadAwareAttribute.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Requires read access level to the current object before serialization can proceed.
            This method will be introduced into the target class.
            </summary>
      <param name="streamingContext">Streaming context.</param>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadAwareAttribute.RuntimeVerificationEnabled">
      <summary>
            Determines whether the code should be verified against the model at runtime.
            The default value is <c>true</c> for the debug build configuration and <c>false</c> for the release build configuration.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingServices">
      <summary>
            Exposes methods to work with the <c>PostSharp.Patterns.Threading</c> namespace.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Threading.ThreadingServices.DeadlockDetected">
      <summary>
            Event raised by implementation of the <see cref="T:PostSharp.Patterns.Threading.DeadlockDetectionPolicy" /> aspect.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingServices.SynchronizationContextComparer">
      <summary>
            Gets or sets the comparer used to determine if two <see cref="T:System.Threading.SynchronizationContext" /> are equivalent.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Threading.ThreadingServices.UnhandledException">
      <summary>
            Event raised by the implementation of the <see cref="T:PostSharp.Patterns.Threading.ActorAttribute" />, <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" /> and <see cref="T:PostSharp.Patterns.Threading.BackgroundAttribute" />
            aspects when an unhandled exception is encountered.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadingServices.WithConcurrencyController(PostSharp.Patterns.Threading.IConcurrencyController)">
      <summary>
            Sets the ambient concurrency controller for the current thread. Until the returned <see cref="T:PostSharp.Patterns.Threading.AmbientConcurrencyControllerContext" /> value is disposed,
            thread-aware objects created in the current thread will be assigned to the given concurrency controller.
            </summary>
      <param name="concurrencyController">The ambient concurrency controller. Use the <see cref="T:PostSharp.Patterns.Threading.ConcurrencyControllerFactory" /> class to create new concurrency controllers.</param>
      <returns>A <see cref="T:System.IDisposable" /> value representing the ambient concurrency controller context.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs">
      <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Threading.ThreadingServices.UnhandledException" /> event.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.Exception">
      <summary>
            Gets the exception.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.IsHandled">
      <summary>
            Determines whether the exception has been handled. Clients of the <see cref="E:PostSharp.Patterns.Threading.ThreadingServices.UnhandledException" /> event
            must set this property to <c>true</c> if they handle the exception. Otherwise, the exception will be rethrown.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.IsTaskMethod">
      <summary>
            Determines whether the exception occurred in a task-like method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.Method">
      <summary>
            Gets the method in which the exception occurred.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.ReturnValue">
      <summary>
            Provides the value to return from the method if the exception has been handled. Clients of the <see cref="E:PostSharp.Patterns.Threading.ThreadingServices.UnhandledException" /> event
            must set this property to the appropriate value if they set the <see cref="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.IsHandled" /> property to <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionEventArgs.Source">
      <summary>
            Gets the source component that caught the exception.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionSource">
      <summary>
            Enumeration of components that can raise the <see cref="E:PostSharp.Patterns.Threading.ThreadingServices.UnhandledException" /> event.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionSource.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionSource.Background">
      <summary>
        <see cref="T:PostSharp.Patterns.Threading.BackgroundAttribute" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Threading.ThreadingUnhandledExceptionSource.Dispatch">
      <summary>
        <see cref="T:PostSharp.Patterns.Threading.DispatchedAttribute" /> or <see cref="T:PostSharp.Patterns.Threading.ActorAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadMismatchException">
      <summary>
            Exception thrown when a thread attempts to access an object that is affined to another thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadMismatchException.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadMismatchException" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadMismatchException.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadMismatchException" /> and sets the error message.
            </summary>
      <param name="message">Error message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadMismatchException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadMismatchException" /> and sets the error message and the inner exception.
            </summary>
      <param name="message">Error message.</param>
      <param name="inner">Inner exception.</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadSafetyPolicy">
      <summary>
            When applied to an assembly, this policy will check for possible concurrency issues.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadSafetyPolicy.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.ThreadSafetyPolicy</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadSafetyPolicy.ValidateCode(System.Object)">
      <summary>
            Validates the element of code to which the constraint is applied.
            </summary>
      <param name="target">Element of code to which the constraint is applied (<see cref="T:System.Reflection.Assembly" />, <see cref="T:System.Type" />,
            <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.PropertyInfo" />,
            <see cref="T:System.Reflection.EventInfo" />, <see cref="T:System.Reflection.FieldInfo" />, <see cref="T:System.Reflection.ParameterInfo" />).</param>
    </member>
    <member name="T:PostSharp.Patterns.Threading.ThreadUnsafeAttribute">
      <summary>
            Custom attribute that, when applied on a type, ensures that only one thread executes in methods of this type.
            When more than one thread accesses methods of this type, a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessException" /> exception is thrown. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.ThreadUnsafeAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Threading.ThreadUnsafeAttribute" />.
            policy.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.UpgradeableReaderAttribute">
      <summary>
            Custom attribute that, when applied on a method, specifies that the method requires read and write access to the object,
            but other threads are allowed to acquire read (but not write) access to the object until a method with the <see cref="T:PostSharp.Patterns.Threading.WriterAttribute" />
            custom attribute is executed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.UpgradeableReaderAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.UpgradeableReaderAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.WriterAttribute">
      <summary>
            Custom attribute that, when applied on a method, specifies that the method requires write access to the object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.WriterAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.WriterAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.YielderAttribute">
      <summary>
            Custom attribute that, when applied on a method, specifies that the method that currently holds write access to the object (see <see cref="T:PostSharp.Patterns.Threading.WriterAttribute" />)
            allows other threads to read the object during the execution of the target method. This custom attribute is typically used on methods that raise events
            that must be processed synchronously by other threads.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Threading.YielderAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Threading.YielderAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel">
      <summary>
        <para>
            The <see cref="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel" /> class describes a threading model in which to methods are processed
            asynchronously from a single thread, suppressing concurrency inside each instance of the actor.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.ActorThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.ActorAttribute" /> to a class.
            </para>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ActorThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ActorThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel" /> class describes a threading model where changes to an object are forbidden after the <see cref="M:PostSharp.Patterns.Threading.IFreezable.Freeze" />
            method has been called on this object.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.FreezableAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel" /> class describes a threading model where changes to an object are forbidden after completion of the object constructor.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.ImmutableAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.PrivateThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.PrivateThreadingModel" /> class describes a behavior of objects in which their threading model is
            determined by the parent they are assigned to in a parent-child relationship. Objects with this threading model
            are considered a private state of their parent object and cannot be accessed from a different object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.PrivateThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.PrivateThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel" /> class describes a threading model where several threads can have concurrent read-only access,
            but where writing to the object requires exclusive access.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.ReaderWriterSynchronizedAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ReaderWriterSynchronizedThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ReadOnlyThreadingModel">
      <summary>
            Base class for <see cref="T:PostSharp.Patterns.Threading.Models.FreezableThreadingModel" /> and <see cref="T:PostSharp.Patterns.Threading.Models.ImmutableThreadingModel" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ReadOnlyThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ReadOnlyThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel" /> class describes a threading model where only a single thread can access the object at a time.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.SynchronizedAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.SynchronizedThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ThreadAffineThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.ThreadAffineThreadingModel" /> class describes a threading model where only the thread that created the object has the right to access this object.
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.ThreadAffineThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.ThreadAffineAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Threading.Models.ThreadUnsafeThreadingModel">
      <summary>
            The <see cref="T:PostSharp.Patterns.Threading.Models.ThreadUnsafeThreadingModel" /> class describes a threading model an object cannot be accessed concurrently by several threads.
            In case of concurrent access, a <see cref="T:PostSharp.Patterns.Threading.ConcurrentAccessException" /> exception will be thrown. The thread-unsafe threading model is not strictly
            a model, because it cannot be deterministically verified. 
            To use the <see cref="T:PostSharp.Patterns.Threading.Models.ThreadAffineThreadingModel" />, apply the <see cref="T:PostSharp.Patterns.Threading.ThreadUnsafeAttribute" /> custom attribute to a class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ThreadUnsafeThreadingModel.IsBlocking">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Threading.ThreadingModel" /> has blocking semantics, i.e. if the threading model may cause the executing thread
            to be blocked, for instance when waiting for a lock.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Threading.Models.ThreadUnsafeThreadingModel.IsThreadSafe">
      <summary>
            Determines whether the threading model is possibly thread safe.
            </summary>
    </member>
  </members>
</doc>